#version 330 core
out vec4 FragColor;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

in vec3 Normal;
in vec3 FragPos;
void main()
{
    float ambientStrength = 0.1;
    float specularStrength = 0.5;

    vec3 lightDir = normalize(lightPos - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);

    vec3 norm = normalize(Normal);
    float diff = max(dot(norm,lightDir),0);
    vec3 diffuse =  diff * lightColor;
    vec3 ambient = ambientStrength * lightColor;

    vec3 reflectDir = reflect(-lightDir,norm);
    // 计算反光度
    float spec = pow(max(dot(viewDir,reflectDir),0),32);
    // 镜面反射光
    vec3 specular = spec * specularStrength * lightColor;
    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
}